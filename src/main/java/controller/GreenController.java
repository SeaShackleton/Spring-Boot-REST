/**
 * 
 */
package controller;

import java.util.ArrayList;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.PathVariable;

import com.seashackleton.springbootrest.Green;
import com.seashackleton.springbootrest.GreenRepository;

/**
 * @author Christian
 *
 */

//Annotation
@Controller
@RequestMapping(path="/green")
public class GreenController {
	@Autowired // This means to get the bean called greenRepository which is auto-generated by Spring, we will use it to handle the data
	private GreenRepository greenRepository;
	
	
	/*
	 * 
	 * 	Get all Green
	 * 
	 */
	@GetMapping(path="/")
	public @ResponseBody Iterable<Green> getAll () {
		return greenRepository.findAll();
	}
	
	
	/*
	 * 
	 * 	Get Green By ID
	 * 
	 */	
	@GetMapping(path="/{id}")
	public @ResponseBody Object getById(@PathVariable Integer id) {
		if( greenRepository.existsById(id) ) {
			// green exists so get it and return it
			Green g = greenRepository.findById(id).get();
			
			return g;
		}
		
		// green does NOT exist, return empty
		return new ArrayList<>();
	}
	
	
	/*
	 * 
	 * 	Add a new Green
	 * 
	 */
	@PostMapping(path="/add")
	public @ResponseBody Iterable<Green> addNewGreen (@RequestParam String name, @RequestParam String state, @RequestParam Integer zip, @RequestParam Integer qty, @RequestParam String item, @RequestParam Integer amount) {
		Green g = new Green();
		g.setName(name);
		g.setState(state);
		g.setZip(zip);
		g.setQty(qty);
		g.setItem(item);
		g.setAmount(amount);
		
		greenRepository.save(g);
		
		return greenRepository.findAll();
	}
	
	
	
	/*
	 * 
	 * 	Update a Green
	 * 
	 */
	@PostMapping(path="/{id}")
	public @ResponseBody Iterable<Green> updateGreen (@PathVariable Integer id, @RequestParam String name, @RequestParam String state, @RequestParam Integer zip, @RequestParam Integer qty, @RequestParam String item, @RequestParam Integer amount) {
		if( greenRepository.existsById(id) ) {
			Green g = greenRepository.findById(id).get();
			g.setName(name);
			g.setState(state);
			g.setZip(zip);
			g.setQty(qty);
			g.setItem(item);
			g.setAmount(amount);
			
			greenRepository.save(g);
		}
		
		return greenRepository.findAll();
	}
	
	
	
	/*
	 * 
	 * 	Delete a Green
	 * 
	 */	
	@DeleteMapping(path="/{id}")
	public @ResponseBody Iterable<Green> deleteGreen (@PathVariable Integer id) {		
		if( greenRepository.existsById(id) ) {
			greenRepository.deleteById(id);
		}
		
		return greenRepository.findAll();
	}
}
